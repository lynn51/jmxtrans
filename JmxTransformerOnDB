package com.youku.java.xtrans.jmxtrans;

import static com.googlecode.jmxtrans.model.Server.mergeServerLists;

import java.io.File;
import java.lang.management.ManagementFactory;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.management.InstanceNotFoundException;
import javax.management.MBeanRegistrationException;
import javax.management.MBeanServer;
import javax.management.ObjectName;

import org.quartz.CronExpression;
import org.quartz.CronTrigger;
import org.quartz.JobDataMap;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.googlecode.jmxtrans.JmxTransformer;
import com.googlecode.jmxtrans.cli.JmxTransConfiguration;
import com.googlecode.jmxtrans.exceptions.LifecycleException;
import com.googlecode.jmxtrans.guice.JmxTransModule;
import com.googlecode.jmxtrans.jobs.ServerJob;
import com.googlecode.jmxtrans.model.JmxProcess;
import com.googlecode.jmxtrans.model.OutputWriter;
import com.googlecode.jmxtrans.model.Query;
import com.googlecode.jmxtrans.model.Server;
import com.googlecode.jmxtrans.model.ValidationException;
import com.youku.java.xtrans.utils.BuildUtil;

// jmxtransinfo save in db
public class JmxTransformerOnDB implements ITransformer, IWatchedCallback {

	private static final Logger log = LoggerFactory.getLogger(JmxTransformer.class);

	private final Scheduler serverScheduler;

	private final JmxTransConfiguration configuration;

	private ImmutableList<Server> masterServersList = ImmutableList.of();

	/**
	 * The shutdown hook.
	 */
	private Thread shutdownHook = new ShutdownHook();

	private volatile boolean isRunning = false;

	private final Injector injector;
	
	private ObjectName objectName;
	
	private final String groupName = "ServerJob";

	@Inject
	public JmxTransformerOnDB(Scheduler serverScheduler, JmxTransConfiguration configuration, Injector injector) {
		this.serverScheduler = serverScheduler;
		this.configuration = configuration;
		this.injector = injector;
	}

	public static void main(String[] args) throws Exception {
		JmxTransConfiguration configuration = JmxTransformerOnDB.getDefaultJmxTransConfiguration();
		
		Injector injector = Guice.createInjector(new JmxTransModule(configuration));

		JmxTransformerOnDB transformer = injector.getInstance(JmxTransformerOnDB.class);

		// Start the process
		transformer.doMain(BuildUtil.getTestList());
	}

	/**
	 * The real main method.
	 */
	public void doMain(List<Server> serverList) throws Exception {
		registerMBean();
		
		this.processIntoServers(serverList);
		
		this.serverScheduler.start();
		
		// Start the process
		this.start();

	}

	private void registerMBean() throws Exception {
		ManagedJmxTransformerProcess mbean = new ManagedJmxTransformerProcess(this, configuration);
		objectName = mbean.getObjectName();
		ManagementFactory.getPlatformMBeanServer()
				.registerMBean(mbean, objectName);
	}
	
	/**
	 * Start.
	 *
	 * @throws LifecycleException the lifecycle exception
	 */
	public synchronized void start() throws LifecycleException {
		if (isRunning) {
			throw new LifecycleException("Process already started");
		} else {
			log.info("Starting Jmxtrans");
			try {
				this.startupSystem();
			} catch (Exception e) {
				log.error(e.getMessage(), e);
				throw new LifecycleException(e);
			}

			// Ensure resources are free
			Runtime.getRuntime().addShutdownHook(shutdownHook);
			isRunning = true;
		}
	}

	/**
	 * Stop.
	 *
	 * @throws LifecycleException the lifecycle exception
	 */
	public synchronized void stop() throws LifecycleException {
		if (!isRunning) {
			throw new LifecycleException("Process already stoped");
		} else {
			try {
				log.info("Stopping Jmxtrans");

				// Remove hook to not call twice
				if (shutdownHook != null) {
					Runtime.getRuntime().removeShutdownHook(shutdownHook);
				}

				this.stopServices();
				isRunning = false;
			} catch (LifecycleException e) {
				log.error(e.getMessage(), e);
				throw new LifecycleException(e);
			}
		}
	}

	/**
	 * Stop services.
	 *
	 * @throws LifecycleException the lifecycle exception
	 */
	// There is a sleep to work around a Quartz issue. The issue is marked to be
	// fixed, but will require further analysis. This should not be reported by
	// Findbugs, but as a more complex issue.
//	@SuppressFBWarnings(value = "SWL_SLEEP_WITH_LOCK_HELD", justification = "Workaround for Quartz issue")
	private synchronized void stopServices() throws LifecycleException {
		try {
			// Shutdown the scheduler
			if (this.serverScheduler.isStarted()) {
				deleteAllJobs();
//				this.serverScheduler.shutdown(true);
				log.debug("Shutdown server scheduler");
				try {
					// FIXME: Quartz issue, need to sleep
					Thread.sleep(2000);
				} catch (InterruptedException e) {
					log.error(e.getMessage(), e);
				}
			}


			// Shutdown the outputwriters
			this.stopWriterMasterServerList();

//			this.unregisterMBean();
			
		} catch (Exception e) {
			log.error(e.getMessage(), e);
			throw new LifecycleException(e);
		}
	}
	
	private void unregisterMBean() throws MBeanRegistrationException, InstanceNotFoundException {
		MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
		mbs.unregisterMBean(objectName);
	}

	/**
	 * Shut down the output writers and clear the master server list
	 * Used both during shutdown and when re-reading config files
	 */
	private void stopWriterAndClearMasterServerList() {
		for (Server server : this.masterServersList) {
			for (Query query : server.getQueries()) {
				for (OutputWriter writer : query.getOutputWriters()) {
					try {
						writer.stop();
						log.debug("Stopped writer: " + writer.getClass().getSimpleName() + " for query: " + query);
					} catch (LifecycleException ex) {
						log.error("Error stopping writer: " + writer.getClass().getSimpleName() + " for query: " + query);
					}
				}
			}
		}
		this.masterServersList = ImmutableList.of();
	}
	
	private void stopWriterMasterServerList() {
		for (Server server : this.masterServersList) {
			for (Query query : server.getQueries()) {
				for (OutputWriter writer : query.getOutputWriters()) {
					try {
						writer.stop();
						log.debug("Stopped writer: " + writer.getClass().getSimpleName() + " for query: " + query);
					} catch (LifecycleException ex) {
						log.error("Error stopping writer: " + writer.getClass().getSimpleName() + " for query: " + query);
					}
				}
			}
		}
	}


	/**
	 * Handy method which runs the JmxProcess
	 */
	public void executeStandalone(JmxProcess process) throws Exception {
		this.masterServersList = process.getServers();

		this.serverScheduler.start();

		this.processServersIntoJobs();

		// Sleep for 10 seconds to wait for jobs to complete.
		// There should be a better way, but it seems that way isn't working
		// right now.
		Thread.sleep(10 * 1000);
	}

	public void restartupSystem(List<Server> serverList) throws LifecycleException {
		// process all the json files into Server objects
		this.processIntoServers(serverList);

		// process the servers into jobs
		this.processServersIntoJobs();
	}
	
	private void startupSystem() throws LifecycleException {
//		this.stopWriterMasterServerList();

		// process the servers into jobs
		this.processServersIntoJobs();
	}


	private void validateSetup(Server server, ImmutableSet<Query> queries) throws ValidationException {
		for (Query q : queries) {
			this.validateSetup(server, q);
		}
	}

	private void validateSetup(Server server, Query query) throws ValidationException {
		List<OutputWriter> writers = query.getOutputWriters();
		for (OutputWriter w : writers) {
			injector.injectMembers(w);
			w.validateSetup(server, query);
		}
	}

	/**
	 * Processes all the servers and manages the dedup process
	 */
	private void processIntoServers(List<Server> serverList) throws LifecycleException {
		// Shutdown the outputwriters and clear the current server list - this gives us a clean
		try {
			this.stopWriterAndClearMasterServerList();
		} catch (Exception e) {
			log.error("Error while clearing master server list: " + e.getMessage(), e);
			throw new LifecycleException(e);
		}
		this.masterServersList = mergeServerLists(this.masterServersList, serverList);

	}

	/**
	 * Processes all the Servers into Job's
	 * <p/>
	 * Needs to be called after processFiles()
	 */
	private void processServersIntoJobs() throws LifecycleException {
		for (Server server : this.masterServersList) {
			try {

				// need to inject the poolMap
				for (Query query : server.getQueries()) {
					for (OutputWriter writer : query.getOutputWriters()) {
						writer.start();
					}
				}

				// Now validate the setup of each of the OutputWriter's per
				// query.
				this.validateSetup(server, server.getQueries());

				// Now schedule the jobs for execution.
				this.scheduleJob(server);
			} catch (ParseException ex) {
				throw new LifecycleException("Error parsing cron expression: " + server.getCronExpression(), ex);
			} catch (SchedulerException ex) {
				throw new LifecycleException("Error scheduling job for server: " + server, ex);
			} catch (ValidationException ex) {
				throw new LifecycleException("Error validating json setup for query", ex);
			}
		}
	}

	/**
	 * Schedules an individual job.
	 */
	private void scheduleJob(Server server) throws ParseException, SchedulerException {

//		String name = server.getHost() + ":" + server.getPort() + "-" + System.currentTimeMillis() + "-" + RandomStringUtils.randomNumeric(10);
		String name = server.getAlias();
		JobDetail jd = new JobDetail(name, groupName, ServerJob.class);

		JobDataMap map = new JobDataMap();
		map.put(Server.class.getName(), server);
		jd.setJobDataMap(map);

		Trigger trigger;

		if ((server.getCronExpression() != null) && CronExpression.isValidExpression(server.getCronExpression())) {
			trigger = new CronTrigger();
			((CronTrigger) trigger).setCronExpression(server.getCronExpression());
			trigger.setName(server.getHost() + ":" + server.getPort() + "-" + Long.valueOf(System.currentTimeMillis()).toString());
			trigger.setStartTime(new Date());
		} else {
			Trigger minuteTrigger = TriggerUtils.makeSecondlyTrigger(configuration.getRunPeriod());
			minuteTrigger.setName(server.getHost() + ":" + server.getPort() + "-" + Long.valueOf(System.currentTimeMillis()).toString());
			minuteTrigger.setStartTime(new Date());

			trigger = minuteTrigger;
		}

		serverScheduler.scheduleJob(jd, trigger);
		if (log.isDebugEnabled()) {
			log.debug("Scheduled job: " + jd.getName() + " for server: " + server);
		}
	}

	/**
	 * Deletes all of the Jobs
	 */
	private void deleteAllJobs() throws Exception {
		List<JobDetail> allJobs = new ArrayList<JobDetail>();
		String[] jobGroups = serverScheduler.getJobGroupNames();
		for (String jobGroup : jobGroups) {
			String[] jobNames = serverScheduler.getJobNames(jobGroup);
			for (String jobName : jobNames) {
				allJobs.add(serverScheduler.getJobDetail(jobName, jobGroup));
			}
		}

		for (JobDetail jd : allJobs) {
			serverScheduler.deleteJob(jd.getName(), jd.getGroup());
			if (log.isDebugEnabled()) {
				log.debug("Deleted scheduled job: " + jd.getName() + " group: " + jd.getGroup());
			}
		}
	}
	
	private void deleteJob(Server server) throws Exception {
		serverScheduler.deleteJob(server.getAlias(), groupName);
	}

	private void deleteServer(Server server) {
		ImmutableList.Builder<Server> results = ImmutableList.builder();
		for (Server existServer : this.masterServersList) {
			if(existServer.equals(server)) {
				for (Query query : existServer.getQueries()) {
					for (OutputWriter writer : query.getOutputWriters()) {
						try {
							writer.stop();
							log.debug("Stopped writer: " + writer.getClass().getSimpleName() + " for query: " + query);
						} catch (LifecycleException ex) {
							log.error("Error stopping writer: " + writer.getClass().getSimpleName() + " for query: " + query);
						}
					}
				}
			} else {
				results.add(existServer);
			}
		}
		this.masterServersList = results.build();
	}
	
/*	@Override
	public void fileModified(File file) throws Exception {
		if (this.isJsonFile(file)) {
			Thread.sleep(1000);
			log.info("Configuration file modified: " + file);
			this.deleteAllJobs();
			this.startupSystem();
		}
	}

	@Override
	public void fileDeleted(File file) throws Exception {
		log.info("Configuration file deleted: " + file);
		Thread.sleep(1000);
		this.deleteAllJobs();
		this.startupSystem();
	}

	@Override
	public void fileAdded(File file) throws Exception {
		if (this.isJsonFile(file)) {
			Thread.sleep(1000);
			log.info("Configuration file added: " + file);
			this.deleteAllJobs();
			this.startupSystem();
		}
	}*/

	protected class ShutdownHook extends Thread {
		public void run() {
			try {
				JmxTransformerOnDB.this.stopServices();
				JmxTransformerOnDB.this.unregisterMBean();
			} catch (Exception e) {
				log.error("Error shutdown hook", e);
			}
		}
	}
	
	public static JmxTransConfiguration getDefaultJmxTransConfiguration() {
		JmxTransConfiguration config = new JmxTransConfiguration();
		config.setJsonDirOrFile(new File("D:\\jmxtrans\\opentsdb.json"));
		config.setRunEndlessly(true);
		config.setRunPeriod(5);
		return config;
	}

	public void serverModified(Server server) throws Exception {
		serverDeleted(server);
		serverAdded(server);
	}

	public void serverDeleted(Server server) throws Exception {
		if(this.masterServersList.contains(server)) {
			deleteJob(server);
			deleteServer(server);
		} else {
			throw new Exception("server not exists: "+ server.toString());
		}
	}

	public void serverAdded(Server server) throws Exception {
		if (this.masterServersList.contains(server)) {
			throw new Exception("server has exist: " + server.toString());
		} else {
			try {
				// need to inject the poolMap
				for (Query query : server.getQueries()) {
					for (OutputWriter writer : query.getOutputWriters()) {
						writer.start();
					}
				}
				// Now validate the setup of each of the OutputWriter's per
				// query.
				this.validateSetup(server, server.getQueries());
				// Now schedule the jobs for execution.
				this.scheduleJob(server);
			} catch (ParseException ex) {
				throw new LifecycleException("Error parsing cron expression: "
						+ server.getCronExpression(), ex);
			} catch (SchedulerException ex) {
				throw new LifecycleException(
						"Error scheduling job for server: " + server, ex);
			} catch (ValidationException ex) {
				throw new LifecycleException(
						"Error validating json setup for query", ex);
			}
		}
	}
	
	public void pauseJob(String serverName) throws Exception {
		this.serverScheduler.pauseJob(serverName, groupName);
	}
	
	public void resumeJob(String serverName) throws Exception {
		this.serverScheduler.resumeJob(serverName, groupName);
	}
	
}
